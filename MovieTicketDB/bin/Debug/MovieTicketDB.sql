/*
Deployment script for MovieTicketDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MovieTicketDB"
:setvar DefaultFilePrefix "MovieTicketDB"
:setvar DefaultDataPath "C:\Users\300267428\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\300267428\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Auditorium]...';


GO
CREATE TABLE [dbo].[Auditorium] (
    [AudiId]   INT          IDENTITY (1, 1) NOT NULL,
    [AudiName] VARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([AudiId] ASC)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [CustId]        INT          IDENTITY (1, 1) NOT NULL,
    [CustFirstname] VARCHAR (30) NOT NULL,
    [CustLastname]  VARCHAR (30) NOT NULL,
    [CustAge]       INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([CustId] ASC)
);


GO
PRINT N'Creating [dbo].[Movie]...';


GO
CREATE TABLE [dbo].[Movie] (
    [MovieId]       INT          IDENTITY (1, 1) NOT NULL,
    [AudiId]        INT          NOT NULL,
    [MovieTitle]    VARCHAR (45) NOT NULL,
    [MoviePrice]    MONEY        NOT NULL,
    [MovieRate]     VARCHAR (10) NOT NULL,
    [MovieAgeLimit] INT          NOT NULL,
    [MovieGenre]    VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([MovieId] ASC)
);


GO
PRINT N'Creating [dbo].[Order]...';


GO
CREATE TABLE [dbo].[Order] (
    [OrderId]        INT        IDENTITY (1, 1) NOT NULL,
    [MovieId]        INT        NOT NULL,
    [CustId]         INT        NOT NULL,
    [TimeId]         INT        NOT NULL,
    [OrderTicketNum] INT        NOT NULL,
    [OrderAmount]    FLOAT (53) NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderId] ASC)
);


GO
PRINT N'Creating [dbo].[Time]...';


GO
CREATE TABLE [dbo].[Time] (
    [TimeId]    INT           IDENTITY (1, 1) NOT NULL,
    [TimeStart] NVARCHAR (10) NOT NULL,
    [TimeEnd]   NVARCHAR (10) NOT NULL,
    PRIMARY KEY CLUSTERED ([TimeId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Movie_Auditorium]...';


GO
ALTER TABLE [dbo].[Movie]
    ADD CONSTRAINT [FK_Movie_Auditorium] FOREIGN KEY ([AudiId]) REFERENCES [dbo].[Auditorium] ([AudiId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Order_Movie]...';


GO
ALTER TABLE [dbo].[Order]
    ADD CONSTRAINT [FK_Order_Movie] FOREIGN KEY ([MovieId]) REFERENCES [dbo].[Movie] ([MovieId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Order_Time]...';


GO
ALTER TABLE [dbo].[Order]
    ADD CONSTRAINT [FK_Order_Time] FOREIGN KEY ([TimeId]) REFERENCES [dbo].[Time] ([TimeId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Order_Customer]...';


GO
ALTER TABLE [dbo].[Order]
    ADD CONSTRAINT [FK_Order_Customer] FOREIGN KEY ([CustId]) REFERENCES [dbo].[Customer] ([CustId]) ON DELETE CASCADE;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO
delete from [dbo].[Auditorium]
DBCC CHECKIDENT (Auditorium, RESEED, 0)
GO
delete from [dbo].[Time]
DBCC CHECKIDENT (Time, RESEED, 0)

GO
SET IDENTITY_INSERT [dbo].[Auditorium] ON
INSERT INTO [dbo].[Auditorium] ([AudiId], [AudiName]) VALUES (1, N'A')
INSERT INTO [dbo].[Auditorium] ([AudiId], [AudiName]) VALUES (2, N'B')
INSERT INTO [dbo].[Auditorium] ([AudiId], [AudiName]) VALUES (3, N'C')
INSERT INTO [dbo].[Auditorium] ([AudiId], [AudiName]) VALUES (4, N'D')
INSERT INTO [dbo].[Auditorium] ([AudiId], [AudiName]) VALUES (5, N'E')
SET IDENTITY_INSERT [dbo].[Auditorium] OFF

GO
SET IDENTITY_INSERT [dbo].[Time] ON
INSERT INTO [dbo].[Time] (TimeId, TimeStart, TimeEnd) VALUES (1, '8:30AM', '11:30AM')
INSERT INTO [dbo].[Time] (TimeId, TimeStart, TimeEnd) VALUES (2, '11:30AM', '14:30PM')
INSERT INTO [dbo].[Time] (TimeId, TimeStart, TimeEnd) VALUES (3, '14:30PM', '17:30PM')
INSERT INTO [dbo].[Time] (TimeId, TimeStart, TimeEnd) VALUES (4, '17:30PM', '20:30PM')
SET IDENTITY_INSERT [dbo].[Time] OFF

GO
delete from [dbo].[Movie]
DBCC CHECKIDENT (Movie, RESEED, 0)

GO
SET IDENTITY_INSERT [dbo].[Movie] ON
INSERT INTO [dbo].[Movie] (MovieId, AudiId, MovieTitle, MoviePrice, MovieRate, MovieAgeLimit, MovieGenre) VALUES (1, 1, 'Ready Player One', 12, 'PG', 6, 'Science Fiction')
INSERT INTO [dbo].[Movie] (MovieId, AudiId, MovieTitle, MoviePrice, MovieRate, MovieAgeLimit, MovieGenre) VALUES (2, 2, 'Pacific Rim: Uprising', 12, 'PG-13', 13, 'Science Fiction')
INSERT INTO [dbo].[Movie] (MovieId, AudiId, MovieTitle, MoviePrice, MovieRate, MovieAgeLimit, MovieGenre) VALUES (3, 3, 'Tomb Raider', 12, 'PG-13', 13, 'Action Adventure')
INSERT INTO [dbo].[Movie] (MovieId, AudiId, MovieTitle, MoviePrice, MovieRate, MovieAgeLimit, MovieGenre) VALUES (4, 4, 'Black Panther', 12, 'PG-13', 13, 'Action Fantasy')
INSERT INTO [dbo].[Movie] (MovieId, AudiId, MovieTitle, MoviePrice, MovieRate, MovieAgeLimit, MovieGenre) VALUES (5, 5, 'Fifty Shades of Grey', 12, '18A', 18, 'Action Adventure Comedy')
SET IDENTITY_INSERT [dbo].[Movie] OFF
GO


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
